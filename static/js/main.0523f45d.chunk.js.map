{"version":3,"sources":["core/firebase.js","components/Auth/LogInPage.js","core/setToFBFunctions/setDefaultNewUserSettingsToFB.js","context/auth-context/auth-context.js","components/Auth/Auth.js","core/englishFrenchTexts.js","components/Nav/SideBar-Menu.js","components/Nav/TopbarMenu.js","components/Nav/Nav.js","context/settings-context/settings-context.js","core/combineAllJobInputsInOneVariable.js","components/Database/AddNewJob.js","components/Database/Job.js","context/applications-context/application-context.js","components/Database/JobList.js","components/Database/EditItem/EditItem.js","core/setToFBFunctions/setUpdatedListOfSourcesToFB.js","core/setToFBFunctions/setUpdatedListOfResultsToFB.js","core/setToFBFunctions/setUpdatedListOfCitiesToFB.js","components/Settings/OptionTabs/AddInput.js","components/Settings/OptionTabs/ListOfCities.js","components/Settings/OptionTabs/ListOfSources.js","components/Settings/OptionTabs/ListOfResults.js","components/Settings/OptionsTab.js","components/Settings/SettingTab.js","components/Settings/SettingsModal.js","core/setToFBFunctions/setApplicationsAllIdsToFB.js","core/setToFBFunctions/setApplicationsByIdToFB.js","core/getFromFBFunctions/fetchApplicationsAllIds.js","core/getFromFBFunctions/fetchApplicationsById.js","core/getFromFBFunctions/getListOfSourcesFromFB.js","core/getFromFBFunctions/getListOfResultsFromFB.js","core/getFromFBFunctions/getListOfCitiesFromFB.js","components/Database/Main.js","core/deleteSelectedJobInfoFromList.js","context/applications-context/applicationsById-reducer.js","context/applications-context/applications-actions.js","context/applications-context/applicationsAllId-reducer.js","context/applications-context/ApplicationsState.js","context/settings-context/settings-reducer.js","context/settings-context/settings-actions.js","context/settings-context/SettingsState.js","App.js","context/auth-context/auth-reducer.js","context/auth-context/auth-actions.js","context/auth-context/AuthState.js","index.js"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","firestore","LoginPage","email","setEmail","setUserName","userName","password","setPassword","handleLogin","handleSignUp","hasAccount","setHasAccount","emailError","passwordError","className","type","autoFocus","required","value","onChange","event","target","data-back","data-front","onClick","setDefaultNewUserSettingsToFB","userId","collection","doc","set","listOfCitiesFromSelectorMenu","listOfResultsFromSelectorMenu","listOfSourcesFromSelectorMenu","authContext","createContext","Auth","handleSetUser","useState","setEmailError","setPasswordError","useContext","AuthContext","setLoggedInUser","logoutUser","clearErrors","addUserName","auth","currentUser","updateProfile","displayName","authListener","useCallback","onAuthStateChanged","user","uid","useEffect","signInWithEmailAndPassword","catch","err","code","message","createUserWithEmailAndPassword","then","result","naviButtomsText","english","french","SideBarMenu","showSettings","setShowSettings","settingsBtnClassNames","toggleShowJobsListTabClick","listOfJobsBtnClassnames","addJobBtnClassnames","toggleShowJobAddTabClick","showFrenchLanguage","handleLogOut","TopbarMenu","showAddNewJobTab","setSearchInputValue","searchInputValue","setShowSearchBar","showSearchBar","placeholder","Nav","sidebarMenuOpened","setSidebarMenuOpened","burgerTopClasses","classNames","open","close","burgerMiddleClasses","burgerBottomClasses","opened","signOut","settingsContext","combineAllJobInputsInOneVariable","companyName","companyCity","applyDate","sourceWhereApplied","comment","firstUsersCommentInJobInfo","company","city","source","date","comments","AddNewJob","handleAddJobToListSubmit","applicationsAllIds","applicationsById","handleOpenEditJobModalClick","setCompanyName","setCompanyCity","setApplyDate","setSourceWhereApplied","setResult","setComments","applicationAlreadyExists","setApplicationAlreadyExists","listOfCities","listOfResults","listOfSources","includes","handleCombineAllInputsInApplicationSubmit","preventDefault","combinedAllJobInputs","onSubmit","length","map","key","Job","handleDeleteApplicationClick","application","jobClassnames","rejected","offer","applicationContext","JobList","filteredApplications","filter","toLowerCase","EditItem","currentlyUpdatedJob","closeEditJobModal","handleAddNewCommentToApplicationSubmit","showAddNewCommentInput","setShowAddNewCommentInput","showAddCommentError","setShowAddCommentError","commentDate","setCommentDate","newComment","setNewComment","showComments","Object","entries","arr","updatedJobCopy","setUpdatedListOfSourcesToFB","setUpdatedListOfResultsToFB","setUpdatedListOfCitiesToFB","AddInput","addNewOptionToList","addNewOptionInput","setAddNewOptionInput","showAddInput","setShowAddInput","addingInputContainerClasses","adding","CSSTransition","in","mountOnEnter","unmountOnExit","timeout","enter","exit","ListOfCities","addCityToList","deleteCity","ListOfSources","addSourceToList","deleteSource","ListOfResults","addResultToList","deleteResult","OptionsTab","optionTabToRender","SettingTab","tabNameToRender","setOptionTabToRender","showOptionTab","setShowOptionTab","changeLanguage","appear","option","checked","SettingsModal","setTabNameToRender","showSettingTab","setShowSettingTab","tab","handleSelectTabToRenderClick","setApplicationsAllIdsToFB","companyList","setApplicationsByIdToFB","fullInfoCompaniesList","fetchApplicationsAllIds","fetchApplicationsById","getListOfSourcesFromFB","getListOfResultsFromFB","getListOfCitiesFromFB","Main","setCurrentlyUpdatedJob","setShowAddNewJobTab","showEditJobModal","setShowEditJobModal","setApplicationAllIdsFromFB","setApplicationsByIdFromFB","addApplicationToState","updateApplication","deleteApplication","setCitiesOptionFromFB","setResultsOptionFromFB","setSourcesOptionFromFB","onSnapshot","data","response","deleteSelectedJobInfoFromList","fullJobsInfoList","keys","reduce","obj","applicationsByIdReducer","state","action","payload","applicationsByIdCopy","applicationsAllIdsReducer","applicationId","ApplicationsState","props","useReducer","applicationsByIdState","dispatchApplicationsById","applicationsAllIdsState","dispatchApplicationsAllIds","Provider","applicationsIds","updatedApplication","children","optionSettingsReducer","SettingsState","dispatchListOfCities","dispatchListOfResults","dispatchListOfSources","cities","results","sources","App","authReducer","AuthState","dispatch","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0523f45d.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/firebase-auth\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBtfXEAOyCoi8v63T4E0H_TdJfPyR6rZkw\",\r\n  authDomain: \"job-base-70122.firebaseapp.com\",\r\n  databaseURL: \"https://job-base-70122.firebaseio.com\",\r\n  projectId: \"job-base-70122\",\r\n  storageBucket: \"job-base-70122.appspot.com\",\r\n  messagingSenderId: \"70839232285\",\r\n  appId: \"1:70839232285:web:f5261f082e25a57e33a3f4\",\r\n};\r\n\r\nexport const fire = firebase.initializeApp(firebaseConfig);\r\n\r\nconst database = firebase.firestore();\r\n\r\nexport default database;\r\n","import React from \"react\";\r\n\r\nconst LoginPage = ({\r\n  email,\r\n  setEmail,\r\n  setUserName,\r\n  userName,\r\n  password,\r\n  setPassword,\r\n  handleLogin,\r\n  handleSignUp,\r\n  hasAccount,\r\n  setHasAccount,\r\n  emailError,\r\n  passwordError,\r\n}) => {\r\n  return (\r\n    <div className=\"loginContainer\">\r\n      <div className=\"input-login\">\r\n        {!hasAccount && (\r\n          <label className=\"login-label\">\r\n            <input\r\n              className=\"login-input\"\r\n              type=\"text\"\r\n              autoFocus\r\n              required\r\n              value={userName}\r\n              onChange={(event) => setUserName(event.target.value)}\r\n            />\r\n            <div className=\"label-text\">Your Name</div>\r\n          </label>\r\n        )}\r\n\r\n        <label className=\"login-label\">\r\n          <input\r\n            className=\"login-input\"\r\n            type=\"text\"\r\n            autoFocus\r\n            required\r\n            value={email}\r\n            onChange={(event) => setEmail(event.target.value)}\r\n          />\r\n          <div className=\"label-text\">Your Email</div>\r\n        </label>\r\n\r\n        <p className=\"errorMsg\">{emailError}</p>\r\n        <label className=\"login-label\">\r\n          <input\r\n            className=\"login-input\"\r\n            type=\"password\"\r\n            required\r\n            value={password}\r\n            onChange={(event) => setPassword(event.target.value)}\r\n          />\r\n          <div className=\"label-text\">Password</div>\r\n        </label>\r\n\r\n        <p className=\"errorMsg\">{passwordError}</p>\r\n      </div>\r\n\r\n      <div className=\"btnContainer\">\r\n        {hasAccount ? (\r\n          <>\r\n            <div\r\n              data-back=\"Sing In\"\r\n              data-front=\"Log In\"\r\n              className=\"btn\"\r\n              onClick={handleLogin}\r\n            >\r\n              {/* Sing In */}\r\n            </div>\r\n            <p>\r\n              Don't have an account?{\" \"}\r\n              <span onClick={() => setHasAccount(!hasAccount)}>Sign Up</span>\r\n            </p>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div\r\n              data-back=\"Register\"\r\n              data-front=\"Sign Up\"\r\n              className=\"btn\"\r\n              onClick={handleSignUp}\r\n            >\r\n              {/* Sign Up */}\r\n            </div>\r\n            <p>\r\n              Have an Account?{\" \"}\r\n              <span onClick={() => setHasAccount(!hasAccount)}>Sign In</span>\r\n            </p>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import database from \"../firebase\";\r\n\r\nconst setDefaultNewUserSettingsToFB = (userId) => {\r\n  const listOfSourcesFromSelectorMenu = [\"LinkedIn\", \"Indeed\", \"GlassDoor\"];\r\n  const listOfCitiesFromSelectorMenu = [\"Montreal\", \"Toronto\"];\r\n  const listOfResultsFromSelectorMenu = [\"Sent\", \"Reject\", \"Offer\"];\r\n\r\n  database\r\n    .collection(\"users\")\r\n    .doc(userId)\r\n    .collection(\"userData\")\r\n    .doc(\"fullJobsInfo\")\r\n    .set({});\r\n  database\r\n    .collection(\"users\")\r\n    .doc(userId)\r\n    .collection(\"userData\")\r\n    .doc(\"listOfJobs\")\r\n    .set({});\r\n  database\r\n    .collection(\"users\")\r\n    .doc(userId)\r\n    .collection(\"settings\")\r\n    .doc(\"cities\")\r\n    .set({ listOfCitiesFromSelectorMenu });\r\n  database\r\n    .collection(\"users\")\r\n    .doc(userId)\r\n    .collection(\"settings\")\r\n    .doc(\"results\")\r\n    .set({ listOfResultsFromSelectorMenu });\r\n  database\r\n    .collection(\"users\")\r\n    .doc(userId)\r\n    .collection(\"settings\")\r\n    .doc(\"sources\")\r\n    .set({ listOfSourcesFromSelectorMenu });\r\n};\r\n\r\nexport default setDefaultNewUserSettingsToFB;\r\n","import { createContext } from \"react\";\r\n\r\nconst authContext = createContext();\r\n\r\nexport default authContext;\r\n","import React, { useState, useEffect, useCallback, useContext } from \"react\";\r\nimport { fire } from \"../../core/firebase\";\r\nimport LoginPage from \"./LogInPage\";\r\nimport setDefaultNewUserSettingsToFB from \"../../core/setToFBFunctions/setDefaultNewUserSettingsToFB\";\r\nimport AuthContext from \"../../context/auth-context/auth-context\";\r\nimport \"./Auth.css\";\r\n\r\nconst Auth = ({ handleSetUser }) => {\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const [emailError, setEmailError] = useState(\"\");\r\n  const [passwordError, setPasswordError] = useState(\"\");\r\n\r\n  const [hasAccount, setHasAccount] = useState(true);\r\n\r\n  const { setLoggedInUser, logoutUser } = useContext(AuthContext);\r\n\r\n  const clearInputs = () => {\r\n    setEmail(\"\");\r\n    setPassword(\"\");\r\n    setUserName(\"\");\r\n  };\r\n\r\n  const clearErrors = () => {\r\n    setEmailError(\"\");\r\n    setPasswordError(\"\");\r\n  };\r\n\r\n  const handleLogin = () => {\r\n    clearErrors();\r\n    fire\r\n      .auth()\r\n      .signInWithEmailAndPassword(email, password)\r\n      .catch((err) => {\r\n        switch (err.code) {\r\n          case \"auth/invalid-email\":\r\n          case \"auth/user-disabled\":\r\n          case \"auth/user-not-found\":\r\n            setEmailError(err.message);\r\n            break;\r\n          case \"auth/wrong-password\":\r\n            setPasswordError(err.message);\r\n            break;\r\n          default:\r\n            return;\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleSignUp = () => {\r\n    clearErrors();\r\n    fire\r\n      .auth()\r\n      .createUserWithEmailAndPassword(email, password)\r\n      .then((result) => {\r\n        setDefaultNewUserSettingsToFB(result.user.uid);\r\n        addUserName();\r\n      })\r\n      .catch((err) => {\r\n        switch (err.code) {\r\n          case \"auth/email-already-in-use\":\r\n          case \"auth/invalid-email\":\r\n            setEmailError(err.message);\r\n            break;\r\n          case \"auth/weak-password\":\r\n            setPasswordError(err.message);\r\n            break;\r\n          default:\r\n            return;\r\n        }\r\n      });\r\n  };\r\n\r\n  const addUserName = () => {\r\n    fire.auth().currentUser.updateProfile({\r\n      displayName: userName,\r\n    });\r\n  };\r\n\r\n  const authListener = useCallback(() => {\r\n    fire.auth().onAuthStateChanged((user) => {\r\n      if (user) {\r\n        clearInputs();\r\n        setLoggedInUser({\r\n          email: user.email,\r\n          uid: user.uid,\r\n          displayName: user.displayName,\r\n        });\r\n      } else {\r\n        logoutUser();\r\n      }\r\n    });\r\n  }, [logoutUser, setLoggedInUser]);\r\n\r\n  useEffect(() => {\r\n    authListener();\r\n  }, [authListener]);\r\n\r\n  return (\r\n    <div>\r\n      <LoginPage\r\n        email={email}\r\n        setEmail={setEmail}\r\n        setUserName={setUserName}\r\n        userName={userName}\r\n        password={password}\r\n        setPassword={setPassword}\r\n        handleLogin={handleLogin}\r\n        handleSignUp={handleSignUp}\r\n        hasAccount={hasAccount}\r\n        setHasAccount={setHasAccount}\r\n        emailError={emailError}\r\n        passwordError={passwordError}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n","export const naviButtomsText = {\r\n  addNewJob: {\r\n    english: \"Add New Job\",\r\n    french: \"Ajouter un nouveau travail\",\r\n  },\r\n  listOfJobs: {\r\n    english: \"List of Jobs\",\r\n    french: \"Liste des emplois\",\r\n  },\r\n  settings: {\r\n    english: \"Settings\",\r\n    french: \"Réglages\",\r\n  },\r\n  logout: {\r\n    english: \"Logout\",\r\n    french: \"Se déconnecter\",\r\n  },\r\n};\r\n","import React from \"react\";\r\nimport \"./SideBar-Menu.css\";\r\nimport { naviButtomsText } from \"../../core/englishFrenchTexts\";\r\n\r\nconst SideBarMenu = ({\r\n  showSettings,\r\n  setShowSettings,\r\n  settingsBtnClassNames,\r\n  toggleShowJobsListTabClick,\r\n  listOfJobsBtnClassnames,\r\n  addJobBtnClassnames,\r\n  toggleShowJobAddTabClick,\r\n  showFrenchLanguage,\r\n  handleLogOut,\r\n}) => {\r\n  return (\r\n    <div className=\"black-drop\">\r\n      <div className=\"sidebar-menu\">\r\n        <div className=\"side-nav-list\">\r\n          <div className=\"side-nav-container-1\">\r\n            <button\r\n              className={addJobBtnClassnames}\r\n              onClick={toggleShowJobAddTabClick}\r\n            >\r\n              {!showFrenchLanguage ? (\r\n                <span>{naviButtomsText.addNewJob.english}</span>\r\n              ) : (\r\n                <span>{naviButtomsText.addNewJob.french}</span>\r\n              )}\r\n            </button>\r\n            <button\r\n              className={listOfJobsBtnClassnames}\r\n              onClick={toggleShowJobsListTabClick}\r\n            >\r\n              {!showFrenchLanguage ? (\r\n                <span>{naviButtomsText.listOfJobs.english}</span>\r\n              ) : (\r\n                <span>{naviButtomsText.listOfJobs.french}</span>\r\n              )}\r\n            </button>\r\n            <button\r\n              className={settingsBtnClassNames}\r\n              onClick={() => setShowSettings(!showSettings)}\r\n            >\r\n              {!showFrenchLanguage ? (\r\n                <span>{naviButtomsText.settings.english}</span>\r\n              ) : (\r\n                <span>{naviButtomsText.settings.french}</span>\r\n              )}\r\n            </button>\r\n          </div>\r\n          <div className=\"side-nav-container-2\">\r\n            <button className=\"nav-btn\" onClick={handleLogOut}>\r\n              {!showFrenchLanguage ? (\r\n                <span>{naviButtomsText.logout.english}</span>\r\n              ) : (\r\n                <span>{naviButtomsText.logout.french}</span>\r\n              )}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SideBarMenu;\r\n","import React from \"react\";\r\nimport { naviButtomsText } from \"../../core/englishFrenchTexts\";\r\n\r\nconst TopbarMenu = ({\r\n  showAddNewJobTab,\r\n  showSettings,\r\n  setShowSettings,\r\n  toggleShowJobAddTabClick,\r\n  toggleShowJobsListTabClick,\r\n  setSearchInputValue,\r\n  showFrenchLanguage,\r\n  searchInputValue,\r\n  handleLogOut,\r\n  settingsBtnClassNames,\r\n  listOfJobsBtnClassnames,\r\n  addJobBtnClassnames,\r\n  setShowSearchBar,\r\n  showSearchBar,\r\n}) => {\r\n  return (\r\n    <div className=\"top-bar-menu\">\r\n      <div className=\"nav-container-1\">\r\n        <div className=\"nav-brn-container\">\r\n          <button\r\n            className={addJobBtnClassnames}\r\n            onClick={toggleShowJobAddTabClick}\r\n          >\r\n            {!showFrenchLanguage ? (\r\n              <span>{naviButtomsText.addNewJob.english}</span>\r\n            ) : (\r\n              <span>{naviButtomsText.addNewJob.french}</span>\r\n            )}\r\n          </button>\r\n          <button\r\n            className={listOfJobsBtnClassnames}\r\n            onClick={toggleShowJobsListTabClick}\r\n          >\r\n            {!showFrenchLanguage ? (\r\n              <span>{naviButtomsText.listOfJobs.english}</span>\r\n            ) : (\r\n              <span>{naviButtomsText.listOfJobs.french}</span>\r\n            )}\r\n          </button>\r\n          <button\r\n            className={settingsBtnClassNames}\r\n            onClick={() => setShowSettings(!showSettings)}\r\n          >\r\n            {!showFrenchLanguage ? (\r\n              <span>{naviButtomsText.settings.english}</span>\r\n            ) : (\r\n              <span>{naviButtomsText.settings.french}</span>\r\n            )}\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"nav-container-2\">\r\n        {!showAddNewJobTab && (\r\n          <i\r\n            className=\"fas fa-search\"\r\n            onClick={() => setShowSearchBar(!showSearchBar)}\r\n          />\r\n        )}\r\n\r\n        {showSearchBar && (\r\n          <input\r\n            className=\"inpit-search\"\r\n            placeholder=\"search...\"\r\n            value={searchInputValue}\r\n            onChange={(event) => setSearchInputValue(event.target.value)}\r\n          />\r\n        )}\r\n      </div>\r\n      <div className=\"nav-container-3\">\r\n        <div className=\"user-btn-container\">\r\n          <h3> Hi, User</h3>\r\n\r\n          <button className=\"nav-btn\" onClick={handleLogOut}>\r\n            {!showFrenchLanguage ? (\r\n              <span>{naviButtomsText.logout.english}</span>\r\n            ) : (\r\n              <span>{naviButtomsText.logout.french}</span>\r\n            )}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TopbarMenu;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { fire } from \"../../core/firebase\";\r\n\r\nimport \"./Nav.css\";\r\nimport classNames from \"classnames\";\r\nimport AuthContext from \"../../context/auth-context/auth-context\";\r\nimport SideBarMenu from \"./SideBar-Menu\";\r\nimport TopbarMenu from \"./TopbarMenu\";\r\n\r\nconst Nav = ({\r\n  toggleShowJobAddTabClick,\r\n  toggleShowJobsListTabClick,\r\n  searchInputValue,\r\n  setSearchInputValue,\r\n  setShowSettings,\r\n  showSettings,\r\n  showAddNewJobTab,\r\n  showFrenchLanguage,\r\n}) => {\r\n  const { logoutUser } = useContext(AuthContext);\r\n\r\n  const [sidebarMenuOpened, setSidebarMenuOpened] = useState(false);\r\n  const [showSearchBar, setShowSearchBar] = useState(false);\r\n\r\n  const burgerTopClasses = classNames(\"burger\", \"burger-top\", {\r\n    open: sidebarMenuOpened,\r\n    close: !sidebarMenuOpened,\r\n  });\r\n  const burgerMiddleClasses = classNames(\"burger\", \"burger-middle\", {\r\n    open: sidebarMenuOpened,\r\n    close: !sidebarMenuOpened,\r\n  });\r\n  const burgerBottomClasses = classNames(\"burger\", \"burger-bottom\", {\r\n    open: sidebarMenuOpened,\r\n    close: !sidebarMenuOpened,\r\n  });\r\n\r\n  const addJobBtnClassnames = classNames(\"nav-btn\", {\r\n    opened: showAddNewJobTab && !showSettings,\r\n  });\r\n  const listOfJobsBtnClassnames = classNames(\"nav-btn\", {\r\n    opened: !showAddNewJobTab && !showSettings,\r\n  });\r\n  const settingsBtnClassNames = classNames(\"nav-btn\", {\r\n    opened: showSettings,\r\n  });\r\n\r\n  const handleLogOut = () => {\r\n    fire.auth().signOut();\r\n    logoutUser();\r\n  };\r\n\r\n  return (\r\n    <div className=\"nav\">\r\n      <div\r\n        className=\"burger-container\"\r\n        onClick={() => setSidebarMenuOpened(!sidebarMenuOpened)}\r\n      >\r\n        <div className={burgerTopClasses}></div>\r\n        <div className={burgerMiddleClasses}></div>\r\n        <div className={burgerBottomClasses}></div>\r\n      </div>\r\n      <TopbarMenu\r\n        showAddNewJobTab={showAddNewJobTab}\r\n        showSettings={showSettings}\r\n        setShowSettings={setShowSettings}\r\n        toggleShowJobAddTabClick={toggleShowJobAddTabClick}\r\n        toggleShowJobsListTabClick={toggleShowJobsListTabClick}\r\n        setSearchInputValue={setSearchInputValue}\r\n        showFrenchLanguage={showFrenchLanguage}\r\n        searchInputValue={searchInputValue}\r\n        handleLogOut={handleLogOut}\r\n        addJobBtnClassnames={addJobBtnClassnames}\r\n        listOfJobsBtnClassnames={listOfJobsBtnClassnames}\r\n        settingsBtnClassNames={settingsBtnClassNames}\r\n        showSearchBar={showSearchBar}\r\n        setShowSearchBar={setShowSearchBar}\r\n      />\r\n      {sidebarMenuOpened && (\r\n        <SideBarMenu\r\n          addJobBtnClassnames={addJobBtnClassnames}\r\n          listOfJobsBtnClassnames={listOfJobsBtnClassnames}\r\n          settingsBtnClassNames={settingsBtnClassNames}\r\n          showAddNewJobTab={showAddNewJobTab}\r\n          showSettings={showSettings}\r\n          setShowSettings={setShowSettings}\r\n          toggleShowJobAddTabClick={toggleShowJobAddTabClick}\r\n          toggleShowJobsListTabClick={toggleShowJobsListTabClick}\r\n          setSearchInputValue={setSearchInputValue}\r\n          showFrenchLanguage={showFrenchLanguage}\r\n          searchInputValue={searchInputValue}\r\n          handleLogOut={handleLogOut}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","import { createContext } from \"react\";\r\n\r\nconst settingsContext = createContext();\r\n\r\nexport default settingsContext;\r\n","const combineAllJobInputsInOneVariable = (\r\n  companyName,\r\n  companyCity,\r\n  applyDate,\r\n  sourceWhereApplied,\r\n  result,\r\n  comment\r\n) => {\r\n  let firstUsersCommentInJobInfo = {};\r\n  firstUsersCommentInJobInfo[applyDate] = comment;\r\n\r\n  return {\r\n    company: companyName,\r\n    city: companyCity,\r\n    source: sourceWhereApplied,\r\n    date: applyDate,\r\n    result: result,\r\n    comments: firstUsersCommentInJobInfo,\r\n  };\r\n};\r\n\r\nexport default combineAllJobInputsInOneVariable;\r\n","import React, { useEffect, useState, useContext } from \"react\";\r\nimport \"./AddNewJob.css\";\r\nimport settingsContext from \"../../context/settings-context/settings-context\";\r\nimport authContext from \"../../context/auth-context/auth-context\";\r\nimport combineAllJobInputsInOneVariable from \"../../core/combineAllJobInputsInOneVariable\";\r\n\r\nconst AddNewJob = ({\r\n  handleAddJobToListSubmit,\r\n  applicationsAllIds,\r\n  applicationsById,\r\n  handleOpenEditJobModalClick,\r\n}) => {\r\n  const [companyName, setCompanyName] = useState(\"\");\r\n  const [companyCity, setCompanyCity] = useState(\"\");\r\n  const [applyDate, setApplyDate] = useState(\"\");\r\n  const [sourceWhereApplied, setSourceWhereApplied] = useState(\"\");\r\n  const [result, setResult] = useState(\"\");\r\n  const [comments, setComments] = useState(\"\");\r\n\r\n  const [applicationAlreadyExists, setApplicationAlreadyExists] = useState(\r\n    false\r\n  );\r\n\r\n  const { listOfCities, listOfResults, listOfSources } = useContext(\r\n    settingsContext\r\n  );\r\n  const { showFrenchLanguage } = useContext(authContext);\r\n\r\n  useEffect(() => {\r\n    if (applicationsAllIds.includes(companyName)) {\r\n      setApplicationAlreadyExists(true);\r\n    }\r\n  }, [companyName, applicationsAllIds]);\r\n\r\n  const clearAllInputs = () => {\r\n    setCompanyName(\"\");\r\n    setCompanyCity(\"\");\r\n    setApplyDate(\"\");\r\n    setSourceWhereApplied(\"\");\r\n    setResult(\"\");\r\n    setComments(\"\");\r\n  };\r\n\r\n  const handleCombineAllInputsInApplicationSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const combinedAllJobInputs = combineAllJobInputsInOneVariable(\r\n      companyName,\r\n      companyCity,\r\n      applyDate,\r\n      sourceWhereApplied,\r\n      result,\r\n      comments\r\n    );\r\n\r\n    handleAddJobToListSubmit(combinedAllJobInputs);\r\n    clearAllInputs();\r\n  };\r\n\r\n  return (\r\n    <div className=\"add-job\">\r\n      <form\r\n        className=\"add-form\"\r\n        onSubmit={(event) =>\r\n          handleCombineAllInputsInApplicationSubmit(event.target.value)\r\n        }\r\n      >\r\n        <div className=\"company-cont\">\r\n          <label className=\"result\">\r\n            <input\r\n              value={companyName}\r\n              onChange={(event) => setCompanyName(event.target.value)}\r\n            />\r\n            <div className=\"text\">\r\n              {!showFrenchLanguage ? (\r\n                <span>Company Name</span>\r\n              ) : (\r\n                <span>Nom de la compagnie</span>\r\n              )}\r\n            </div>\r\n          </label>\r\n        </div>\r\n        {applicationAlreadyExists && (\r\n          <div>\r\n            {!showFrenchLanguage ? (\r\n              <h2>\r\n                Application with such company name already exists. What do you\r\n                want to do?\r\n              </h2>\r\n            ) : (\r\n              <h2>\r\n                L'application avec ce nom de société existe déjà. Que\r\n                faites-vous vouloir faire?\r\n              </h2>\r\n            )}\r\n\r\n            <button\r\n              onClick={(event) =>\r\n                handleOpenEditJobModalClick(\r\n                  event,\r\n                  applicationsById[companyName]\r\n                )\r\n              }\r\n            >\r\n              Open application\r\n            </button>\r\n            <button onClick={() => setApplicationAlreadyExists(false)}>\r\n              Continue Adding\r\n            </button>\r\n          </div>\r\n        )}\r\n        {companyName.length > 2 && (\r\n          <div className=\"option-cont\">\r\n            <label className=\"result\">\r\n              <select\r\n                value={companyCity}\r\n                onChange={(event) => setCompanyCity(event.target.value)}\r\n              >\r\n                {!showFrenchLanguage ? (\r\n                  <option value=\"\">\r\n                    --Please choose a City where you applied--\r\n                  </option>\r\n                ) : (\r\n                  <option value=\"\">\r\n                    {\" \"}\r\n                    --Veuillez choisir une ville où vous avez postulé--\r\n                  </option>\r\n                )}\r\n                {listOfCities.map((city) => {\r\n                  return (\r\n                    <option key={city} value={city}>\r\n                      {city}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </select>\r\n              <div className=\"text\">\r\n                {!showFrenchLanguage ? (\r\n                  <span>City where you applied</span>\r\n                ) : (\r\n                  <span>Ville où vous avez postulé</span>\r\n                )}\r\n              </div>\r\n            </label>\r\n          </div>\r\n        )}\r\n        {companyCity && (\r\n          <div className=\"option-cont\">\r\n            <input\r\n              required\r\n              className=\"date-input\"\r\n              value={applyDate}\r\n              type=\"date\"\r\n              onChange={(event) => setApplyDate(event.target.value)}\r\n            />\r\n            <div className=\"text\">\r\n              {!showFrenchLanguage ? (\r\n                <span>Apply date</span>\r\n              ) : (\r\n                <span>Appliquer la date</span>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {applyDate && (\r\n          <div className=\"option-cont\">\r\n            <select\r\n              value={sourceWhereApplied}\r\n              onChange={(event) => setSourceWhereApplied(event.target.value)}\r\n            >\r\n              {!showFrenchLanguage ? (\r\n                <option value=\"\">\r\n                  --Please choose a source where you applied--\r\n                </option>\r\n              ) : (\r\n                <option value=\"\">\r\n                  --Veuillez choisir une source où vous avez postulé--\r\n                </option>\r\n              )}\r\n\r\n              {listOfSources.map((source) => {\r\n                return (\r\n                  <option key={source} value={source}>\r\n                    {source}\r\n                  </option>\r\n                );\r\n              })}\r\n            </select>\r\n            <div className=\"text\">\r\n              {!showFrenchLanguage ? (\r\n                <span>Source where applied</span>\r\n              ) : (\r\n                <span>Source où appliqué</span>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {sourceWhereApplied && (\r\n          <div className=\"option-cont\">\r\n            {\" \"}\r\n            <select\r\n              value={result}\r\n              onChange={(event) => setResult(event.target.value)}\r\n            >\r\n              {!showFrenchLanguage ? (\r\n                <option value=\"\">\r\n                  -- Please choose a Result of Interview --\r\n                </option>\r\n              ) : (\r\n                <option value=\"\">\r\n                  -- Veuillez choisir un résultat de l'entrevue --\r\n                </option>\r\n              )}\r\n\r\n              {listOfResults.map((result) => {\r\n                return (\r\n                  <option key={result} value={result}>\r\n                    {result}\r\n                  </option>\r\n                );\r\n              })}\r\n            </select>\r\n            <div className=\"text\">\r\n              {!showFrenchLanguage ? (\r\n                <span>Result of this Application</span>\r\n              ) : (\r\n                <span>Résultat de cette application</span>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {result && (\r\n          <div className=\"comments\">\r\n            <textarea\r\n              className=\"text-area-comments\"\r\n              value={comments}\r\n              onChange={(event) => setComments(event.target.value)}\r\n              required\r\n            ></textarea>\r\n            <div className=\"text\">Comments</div>\r\n          </div>\r\n        )}\r\n\r\n        {result && (\r\n          <div className=\"submit-bottno-container\">\r\n            <div\r\n              data-back={\r\n                !showFrenchLanguage ? \"Add to List\" : \"Ajouter à la liste\"\r\n              }\r\n              data-front={!showFrenchLanguage ? \"Submit\" : \"Soumettre\"}\r\n              className=\"submit-btn\"\r\n              onClick={handleCombineAllInputsInApplicationSubmit}\r\n            ></div>\r\n          </div>\r\n        )}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddNewJob;\r\n","import React from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\nconst Job = ({\r\n  company,\r\n  applicationsById,\r\n  handleDeleteApplicationClick,\r\n  handleOpenEditJobModalClick,\r\n}) => {\r\n  const application = applicationsById[company];\r\n\r\n  const jobClassnames = classNames(\"job\", {\r\n    rejected: application.result === \"Reject\",\r\n    offer: application.result === \"Offer\",\r\n  });\r\n\r\n  return (\r\n    <div className={jobClassnames}>\r\n      <h4 className=\"joblist-job-title\">{company}</h4>\r\n      <p className=\"joblist-job-title city\">{application.city}</p>\r\n      <p className=\"joblist-job-title date\">{application.date}</p>\r\n      <p className=\"joblist-job-title source\">{application.source}</p>\r\n      <p className=\"joblist-job-title result\">{application.result}</p>\r\n      <div className=\"icons\">\r\n        <i\r\n          onClick={(event) => handleOpenEditJobModalClick(event, application)}\r\n          className=\"job-edit-btn fas fa-edit\"\r\n        ></i>\r\n        <i\r\n          onClick={() => {\r\n            handleDeleteApplicationClick(company);\r\n          }}\r\n          className=\"job-delete-btn fas fa-trash-alt\"\r\n        ></i>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Job;\r\n","import { createContext } from \"react\";\r\n\r\nconst applicationContext = createContext();\r\n\r\nexport default applicationContext;\r\n","import React, { useContext } from \"react\";\r\nimport Job from \"./Job\";\r\nimport \"./JobList.css\";\r\nimport applicationContext from \"../../context/applications-context/application-context\";\r\n\r\nconst JobList = ({\r\n  searchInputValue,\r\n  handleDeleteApplicationClick,\r\n  handleOpenEditJobModalClick,\r\n  showFrenchLanguage,\r\n}) => {\r\n  const { applicationsAllIds, applicationsById } = useContext(\r\n    applicationContext\r\n  );\r\n\r\n  const filteredApplications = applicationsAllIds.filter((company) => {\r\n    return company.toLowerCase().includes(searchInputValue.toLowerCase());\r\n  });\r\n  return (\r\n    <div className=\"job-list-container\">\r\n      <div className=\"job-list\">\r\n        {!showFrenchLanguage ? (\r\n          <div className=\"job-header\">\r\n            <p className=\"job-header-company-name\">Company Name</p>\r\n            <p className=\"job-header-city\">City</p>\r\n            <p className=\"job-header-date\">Date</p>\r\n            <p className=\"job-header-source\">Source</p>\r\n            <p className=\"job-header-result\">Result</p>\r\n            <p className=\"job-header-edit\">Edit/Delete</p>\r\n          </div>\r\n        ) : (\r\n          <div className=\"job-header\">\r\n            <p>Nom de la compagnie</p>\r\n            <p>Ville</p>\r\n            <p>Date</p>\r\n            <p>La source</p>\r\n            <p>Résultat</p>\r\n            <p>Modifier/Supprimer</p>\r\n          </div>\r\n        )}\r\n        {filteredApplications.map((company) => {\r\n          return (\r\n            <Job\r\n              company={company}\r\n              applicationsById={applicationsById}\r\n              key={company}\r\n              handleDeleteApplicationClick={handleDeleteApplicationClick}\r\n              handleOpenEditJobModalClick={handleOpenEditJobModalClick}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JobList;\r\n","import React, { useState } from \"react\";\r\nimport \"./EditItem.css\";\r\n\r\nconst EditItem = ({\r\n  currentlyUpdatedJob,\r\n  closeEditJobModal,\r\n  handleAddNewCommentToApplicationSubmit,\r\n}) => {\r\n  const [showAddNewCommentInput, setShowAddNewCommentInput] = useState(false);\r\n  const [showAddCommentError, setShowAddCommentError] = useState(false);\r\n  const [commentDate, setCommentDate] = useState(\"\");\r\n  const [newComment, setNewComment] = useState(\"\");\r\n\r\n  let showComments = Object.entries(currentlyUpdatedJob.comments).map((arr) => {\r\n    return (\r\n      <div className=\"comment-info\" key={arr[0]}>\r\n        <div className=\"comment-date\">\r\n          <h4>Date</h4>\r\n          <p>{arr[0]}</p>\r\n        </div>\r\n        <div className=\"comment-text\">\r\n          <h4>Comment:</h4>\r\n          <p>{arr[1]}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  const handleCombineNewCommentInputsSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (!commentDate) {\r\n      setShowAddCommentError(true);\r\n      return;\r\n    }\r\n    setShowAddCommentError(false);\r\n    let updatedJobCopy = currentlyUpdatedJob;\r\n    updatedJobCopy.comments[commentDate] = newComment;\r\n\r\n    handleAddNewCommentToApplicationSubmit(updatedJobCopy);\r\n\r\n    setShowAddNewCommentInput(!showAddNewCommentInput);\r\n    setCommentDate(\"\");\r\n    setNewComment(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"black-cover\">\r\n      <div className=\"edit-window\">\r\n        <div className=\"edit-header\">\r\n          <h1>Company info</h1>\r\n          <i\r\n            onClick={closeEditJobModal}\r\n            className=\"close-settings-btn fas fa-times\"\r\n          />\r\n        </div>\r\n        <div className=\"company-data-container\">\r\n          <div className=\"detailed-company-information\">\r\n            <div className=\"info-cont\">\r\n              <h4>Company name:</h4>\r\n              <p>{currentlyUpdatedJob.company}</p>\r\n            </div>\r\n            <div className=\"info-cont\">\r\n              <h4>City:</h4>\r\n              <p>{currentlyUpdatedJob.city}</p>\r\n            </div>\r\n            <div className=\"info-cont\">\r\n              <h4>Date applied:</h4>\r\n              <p>{currentlyUpdatedJob.date}</p>\r\n            </div>\r\n            <div className=\"info-cont\">\r\n              <h4>Source: </h4>\r\n              <p>{currentlyUpdatedJob.source}</p>\r\n            </div>\r\n            <div className=\"info-cont\">\r\n              <h4>Result: </h4>\r\n              <p>{currentlyUpdatedJob.result}</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"comments-container\">\r\n            <h4>Comments: </h4>\r\n            {showComments}\r\n\r\n            <button\r\n              className=\"add-comment-btn\"\r\n              onClick={() => setShowAddNewCommentInput(!showAddNewCommentInput)}\r\n            >\r\n              Add Comment\r\n            </button>\r\n\r\n            {showAddNewCommentInput && (\r\n              <div className=\"add-comment-input\">\r\n                <form>\r\n                  <input\r\n                    onChange={(event) => setCommentDate(event.target.value)}\r\n                    value={commentDate}\r\n                    type=\"date\"\r\n                  />\r\n                  <input\r\n                    value={newComment}\r\n                    onChange={(event) => setNewComment(event.target.value)}\r\n                  />\r\n                  {showAddCommentError && (\r\n                    <p className=\"add-error-message\">\r\n                      Please Choose the Date of new comment\r\n                    </p>\r\n                  )}\r\n                  <button onClick={handleCombineNewCommentInputsSubmit}>\r\n                    Add\r\n                  </button>\r\n                </form>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditItem;\r\n","import database from \"../firebase\";\r\n\r\nconst setUpdatedListOfSourcesToFB = (user, listOfSourcesFromSelectorMenu) => {\r\n  database\r\n    .collection(\"users\")\r\n    .doc(user.uid)\r\n    .collection(\"settings\")\r\n    .doc(\"sources\")\r\n    .set({ listOfSourcesFromSelectorMenu });\r\n};\r\n\r\nexport default setUpdatedListOfSourcesToFB;\r\n","import database from \"../firebase\";\r\n\r\nconst setUpdatedListOfResultsToFB = (user, listOfResultsFromSelectorMenu) => {\r\n  database\r\n    .collection(\"users\")\r\n    .doc(user.uid)\r\n    .collection(\"settings\")\r\n    .doc(\"results\")\r\n    .set({ listOfResultsFromSelectorMenu });\r\n};\r\n\r\nexport default setUpdatedListOfResultsToFB;\r\n","import database from \"../firebase\";\r\n\r\nconst setUpdatedListOfCitiesToFB = (user, listOfCitiesFromSelectorMenu) => {\r\n  database\r\n    .collection(\"users\")\r\n    .doc(user.uid)\r\n    .collection(\"settings\")\r\n    .doc(\"cities\")\r\n    .set({ listOfCitiesFromSelectorMenu });\r\n};\r\n\r\nexport default setUpdatedListOfCitiesToFB;\r\n","import React, { useState } from \"react\";\r\nimport classNames from \"classnames\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport \"./AddInput.css\";\r\n\r\nconst AddInput = ({ addNewOptionToList }) => {\r\n  const [addNewOptionInput, setAddNewOptionInput] = useState(\"\");\r\n  const [showAddInput, setShowAddInput] = useState(false);\r\n\r\n  // const addBtnClasses = classNames(\"add-item-btn\", \"fas fa-plus\", {\r\n  //   active: showAddInput,\r\n  // });\r\n  // const closeAddModalBtnClasses = classNames('fas fa-times', {\r\n  //   activeClose: !showAddInput\r\n  // })\r\n  const addingInputContainerClasses = classNames(\"add-new-item-container\", {\r\n    adding: showAddInput,\r\n  });\r\n\r\n  return (\r\n    <div className={addingInputContainerClasses}>\r\n      {!showAddInput ? (\r\n        <i\r\n          className=\"add-item-btn fas fa-plus \"\r\n          onClick={() => setShowAddInput(!showAddInput)}\r\n        ></i>\r\n      ) : (\r\n        <i\r\n          className=\"close-add-item-btn fas fa-times\"\r\n          onClick={() => setShowAddInput(!showAddInput)}\r\n        ></i>\r\n      )}\r\n\r\n      <CSSTransition\r\n        in={showAddInput}\r\n        mountOnEnter\r\n        unmountOnExit\r\n        timeout={{ enter: 1000, exit: 200 }}\r\n        classNames=\"input-appear\"\r\n      >\r\n        <div className=\"add-item-input\">\r\n          <input\r\n            value={addNewOptionInput}\r\n            onChange={(event) => setAddNewOptionInput(event.target.value)}\r\n          />\r\n          <button onClick={() => addNewOptionToList(addNewOptionInput)}>\r\n            submit\r\n          </button>\r\n        </div>\r\n      </CSSTransition>\r\n      {!showAddInput && <h4>Add new</h4>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddInput;\r\n","import React from \"react\";\r\nimport AddInput from \"./AddInput\";\r\n\r\nconst ListOfCities = ({ listOfCities, addCityToList, deleteCity }) => {\r\n  return (\r\n    <div className=\"selector-contaner2\">\r\n      <h4>Delete or Add new city in the List:</h4>\r\n      <ul className=\"list-of-items\">\r\n        {listOfCities.map((city) => (\r\n          <div key={city} className=\"list-contaniner\">\r\n            <li>{city}</li>\r\n            <i\r\n              onClick={() => deleteCity(city)}\r\n              className=\"delete-item-btn fas fa-trash-alt\"\r\n            ></i>\r\n          </div>\r\n        ))}\r\n      </ul>\r\n      <AddInput addNewOptionToList={addCityToList} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListOfCities;\r\n","import React from \"react\";\r\nimport AddInput from \"./AddInput\";\r\n\r\nconst ListOfSources = ({ listOfSources, addSourceToList, deleteSource }) => {\r\n  return (\r\n    <div className=\"selector-contaner2\">\r\n      <h4>Delete or Add new source in the List:</h4>\r\n      <ul className=\"list-of-items\">\r\n        {listOfSources.map((source) => (\r\n          <div key={source} className=\"list-contaniner\">\r\n            <li>{source}</li>\r\n            <i\r\n              onClick={() => deleteSource(source)}\r\n              className=\"delete-item-btn fas fa-trash-alt\"\r\n            ></i>\r\n          </div>\r\n        ))}\r\n      </ul>\r\n      <AddInput addNewOptionToList={addSourceToList} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListOfSources;\r\n","import React from \"react\";\r\nimport AddInput from \"./AddInput\";\r\n\r\nconst ListOfResults = ({ listOfResults, addResultToList, deleteResult }) => {\r\n  return (\r\n    <div className=\"selector-contaner2\">\r\n      <h4>Delete or Add new result in the List:</h4>\r\n      <ul className=\"list-of-items\">\r\n        {listOfResults.map((result) => (\r\n          <div key={result} className=\"list-contaniner\">\r\n            <li>{result}</li>\r\n            <i\r\n              onClick={() => deleteResult(result)}\r\n              className=\"delete-item-btn fas fa-trash-alt\"\r\n            ></i>\r\n          </div>\r\n        ))}\r\n      </ul>\r\n      <AddInput addNewOptionToList={addResultToList} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListOfResults;\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport settingsContext from \"../../context/settings-context/settings-context\";\r\nimport authContext from \"../../context/auth-context/auth-context\";\r\nimport setUpdatedListOfSourcesToFB from \"../../core/setToFBFunctions/setUpdatedListOfSourcesToFB\";\r\nimport setUpdatedListOfResultsToFB from \"../../core/setToFBFunctions/setUpdatedListOfResultsToFB\";\r\nimport setUpdatedListOfCitiesToFB from \"../../core/setToFBFunctions/setUpdatedListOfCitiesToFB\";\r\nimport \"./OptionsTab.css\";\r\nimport ListOfCities from \"./OptionTabs/ListOfCities\";\r\nimport ListOfSources from \"./OptionTabs/ListOfSources\";\r\nimport ListOfResults from \"./OptionTabs/ListOfResults\";\r\n\r\nconst OptionsTab = ({ optionTabToRender }) => {\r\n  const {\r\n    listOfCities,\r\n    listOfResults,\r\n    listOfSources,\r\n    addCityToList,\r\n    addResultToList,\r\n    addSourceToList,\r\n    deleteCity,\r\n    deleteResult,\r\n    deleteSource,\r\n  } = useContext(settingsContext);\r\n\r\n  const { user } = useContext(authContext);\r\n\r\n  useEffect(() => {\r\n    if (listOfSources.length < 1) {\r\n      return;\r\n    }\r\n    setUpdatedListOfSourcesToFB(user, listOfSources);\r\n  }, [listOfSources, user]);\r\n\r\n  useEffect(() => {\r\n    if (listOfResults.length < 1) {\r\n      return;\r\n    }\r\n    setUpdatedListOfResultsToFB(user, listOfResults);\r\n  }, [listOfResults, user]);\r\n\r\n  useEffect(() => {\r\n    if (listOfCities.length < 1) {\r\n      return;\r\n    }\r\n    setUpdatedListOfCitiesToFB(user, listOfCities);\r\n  }, [listOfCities, user]);\r\n\r\n  if (optionTabToRender === \"Cities\") {\r\n    return (\r\n      <ListOfCities\r\n        listOfCities={listOfCities}\r\n        deleteCity={deleteCity}\r\n        addCityToList={addCityToList}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (optionTabToRender === \"Sources\") {\r\n    return (\r\n      <ListOfSources\r\n        listOfSources={listOfSources}\r\n        addSourceToList={addSourceToList}\r\n        deleteSource={deleteSource}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (optionTabToRender === \"Results\") {\r\n    return (\r\n      <ListOfResults\r\n        listOfResults={listOfResults}\r\n        deleteResult={deleteResult}\r\n        addResultToList={addResultToList}\r\n      />\r\n    );\r\n  }\r\n};\r\n\r\nexport default OptionsTab;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport OptionsTab from \"./OptionsTab\";\r\nimport authContext from \"../../context/auth-context/auth-context\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport \"./SettingTab.css\";\r\n\r\nconst SettingTab = ({ tabNameToRender }) => {\r\n  const optionTabs = [\"Cities\", \"Sources\", \"Results\"];\r\n  const [optionTabToRender, setOptionTabToRender] = useState(null);\r\n  const [showOptionTab, setShowOptionTab] = useState(false);\r\n\r\n  const { showFrenchLanguage, changeLanguage } = useContext(authContext);\r\n\r\n  useEffect(() => {\r\n    setShowOptionTab(false);\r\n    setOptionTabToRender(null);\r\n  }, [tabNameToRender]);\r\n\r\n  const handleRenderSelectedTabClick = (tab) => {\r\n    setOptionTabToRender(tab);\r\n    setShowOptionTab(true);\r\n  };\r\n\r\n  if (tabNameToRender === \"Selectors\") {\r\n    return (\r\n      <CSSTransition\r\n        in={true}\r\n        appear={true}\r\n        exit={true}\r\n        timeout={300}\r\n        classNames=\"setting-tab\"\r\n        key={tabNameToRender}\r\n      >\r\n        <div className=\"selector-box\">\r\n          <div className=\"selector-contaner1\">\r\n            <h2>Choose selector you would like to edit:</h2>\r\n            {optionTabs.map((option) => (\r\n              <div key={option} className=\"selector-btn-container\">\r\n                <button\r\n                  className={\r\n                    option === optionTabToRender\r\n                      ? \"option-selector tab-btn activated\"\r\n                      : \"option-selector tab-btn\"\r\n                  }\r\n                  onClick={() => handleRenderSelectedTabClick(option)}\r\n                >\r\n                  {option}\r\n                </button>\r\n                <i\r\n                  className={\r\n                    option === optionTabToRender\r\n                      ? \"fas fa-angle-double-right arrow-btn-selector selected\"\r\n                      : \"fas fa-angle-double-right arrow-btn-selector\"\r\n                  }\r\n                ></i>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          {showOptionTab && (\r\n            <OptionsTab optionTabToRender={optionTabToRender} />\r\n          )}\r\n        </div>\r\n      </CSSTransition>\r\n    );\r\n  }\r\n\r\n  if (tabNameToRender === \"Personal Info\") {\r\n    return (\r\n      <CSSTransition\r\n        in={true}\r\n        appear={true}\r\n        exit={true}\r\n        timeout={650}\r\n        classNames=\"setting-tab\"\r\n        key={tabNameToRender}\r\n      >\r\n        <div>Personal Info</div>\r\n      </CSSTransition>\r\n    );\r\n  }\r\n  if (tabNameToRender === \"Language\") {\r\n    return (\r\n      <div>\r\n        Turn on french language\r\n        <div className=\"checkbox-language-container\">\r\n          <input\r\n            checked={showFrenchLanguage}\r\n            className=\"language-checkbox\"\r\n            type=\"checkbox\"\r\n            onChange={changeLanguage}\r\n          />\r\n          <span></span>\r\n        </div>\r\n        {/* <button onClick={changeLanguage}>Change Language</button> */}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default SettingTab;\r\n","import React, { useState } from \"react\";\r\nimport \"./Settings.css\";\r\nimport SettingTab from \"./SettingTab\";\r\n\r\nconst SettingsModal = ({ setShowSettings }) => {\r\n  const [tabNameToRender, setTabNameToRender] = useState(null);\r\n\r\n  const [showSettingTab, setShowSettingTab] = useState(false);\r\n\r\n  const settingTabs = [\"Personal Info\", \"Language\", \"Selectors\"];\r\n\r\n  const handleSelectTabToRenderClick = (tab) => {\r\n    setShowSettingTab(true);\r\n    setTabNameToRender(tab);\r\n  };\r\n\r\n  return (\r\n    <div className=\"black-background\">\r\n      <div className=\"settings\">\r\n        <div className=\"settings-header\">\r\n          <h2>Settings</h2>\r\n          <i\r\n            className=\"close-settings-btn fas fa-times\"\r\n            onClick={() => setShowSettings(false)}\r\n          ></i>\r\n        </div>\r\n        <div className=\"settings-nav\">\r\n          {settingTabs.map((tab) => (\r\n            <button\r\n              className={\r\n                tab === tabNameToRender ? \"tab-btn activated\" : \"tab-btn\"\r\n              }\r\n              value={tab}\r\n              key={tab}\r\n              onClick={() => handleSelectTabToRenderClick(tab)}\r\n            >\r\n              {tab}\r\n            </button>\r\n          ))}\r\n        </div>\r\n        <div className=\"settings-container\">\r\n          <div className=\"tabs-container\">\r\n            {showSettingTab && (\r\n              <SettingTab\r\n                tabNameToRender={tabNameToRender}\r\n                showSettingTab={showSettingTab}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SettingsModal;\r\n","import database from \"../firebase\";\r\n\r\nconst setApplicationsAllIdsToFB = (user, companyList) => {\r\n  database\r\n    .collection(\"users\")\r\n    .doc(user.uid)\r\n    .collection(\"userData\")\r\n    .doc(\"listOfJobs\")\r\n    .set({ companyList });\r\n};\r\n\r\nexport default setApplicationsAllIdsToFB;\r\n","import database from \"../firebase\";\r\n\r\nconst setApplicationsByIdToFB = (user, fullInfoCompaniesList) => {\r\n  database\r\n    .collection(\"users\")\r\n    .doc(user.uid)\r\n    .collection(\"userData\")\r\n    .doc(\"fullJobsInfo\")\r\n    .set(fullInfoCompaniesList);\r\n};\r\n\r\nexport default setApplicationsByIdToFB;\r\n","import database from \"../firebase\";\r\n\r\nconst fetchApplicationsAllIds = (user) => {\r\n  return database\r\n    .collection(\"users\")\r\n    .doc(user.uid)\r\n    .collection(\"userData\")\r\n    .doc(\"listOfJobs\");\r\n};\r\n\r\nexport default fetchApplicationsAllIds;\r\n","import database from \"../firebase\";\r\nconst fetchApplicationsById = (user) => {\r\n  return database\r\n    .collection(\"users\")\r\n    .doc(user.uid)\r\n    .collection(\"userData\")\r\n    .doc(\"fullJobsInfo\");\r\n};\r\n\r\nexport default fetchApplicationsById;\r\n","import database from \"../firebase\";\r\n\r\nconst getListOfSourcesFromFB = (user) => {\r\n  return database\r\n    .collection(\"users\")\r\n    .doc(user.uid)\r\n    .collection(\"settings\")\r\n    .doc(\"sources\");\r\n};\r\n\r\nexport default getListOfSourcesFromFB;\r\n","import database from \"../firebase\";\r\n\r\nconst getListOfResultsFromFB = (user) => {\r\n  return database\r\n    .collection(\"users\")\r\n    .doc(user.uid)\r\n    .collection(\"settings\")\r\n    .doc(\"results\");\r\n};\r\n\r\nexport default getListOfResultsFromFB;\r\n","import database from \"../firebase\";\r\n\r\nconst getListOfCitiesFromFB = (user) => {\r\n  return database\r\n    .collection(\"users\")\r\n    .doc(user.uid)\r\n    .collection(\"settings\")\r\n    .doc(\"cities\");\r\n};\r\n\r\nexport default getListOfCitiesFromFB;\r\n","import React, { useEffect, useState, useContext } from \"react\";\r\nimport Nav from \"../Nav/Nav\";\r\nimport AddNewJob from \"./AddNewJob\";\r\nimport JobList from \"./JobList\";\r\nimport EditItem from \"./EditItem/EditItem\";\r\nimport SettingsModal from \"../Settings/SettingsModal\";\r\n\r\nimport setApplicationsAllIdsToFB from \"../../core/setToFBFunctions/setApplicationsAllIdsToFB\";\r\nimport setApplicationsByIdToFB from \"../../core/setToFBFunctions/setApplicationsByIdToFB\";\r\nimport fetchApplicationsAllIds from \"../../core/getFromFBFunctions/fetchApplicationsAllIds\";\r\nimport fetchApplicationsById from \"../../core/getFromFBFunctions/fetchApplicationsById\";\r\nimport getListOfSourcesFromFB from \"../../core/getFromFBFunctions/getListOfSourcesFromFB\";\r\nimport getListOfResultsFromFB from \"../../core/getFromFBFunctions/getListOfResultsFromFB\";\r\nimport getListOfCitiesFromFB from \"../../core/getFromFBFunctions/getListOfCitiesFromFB\";\r\n\r\nimport applicationContext from \"../../context/applications-context/application-context\";\r\nimport settingsContext from \"../../context/settings-context/settings-context\";\r\n\r\nconst Main = ({ user, showFrenchLanguage }) => {\r\n  const [currentlyUpdatedJob, setCurrentlyUpdatedJob] = useState(null);\r\n\r\n  const [showAddNewJobTab, setShowAddNewJobTab] = useState(false);\r\n  const [showEditJobModal, setShowEditJobModal] = useState(false);\r\n  const [showSettings, setShowSettings] = useState(false);\r\n\r\n  const [searchInputValue, setSearchInputValue] = useState(\"\");\r\n\r\n  const {\r\n    applicationsById,\r\n    applicationsAllIds,\r\n    setApplicationAllIdsFromFB,\r\n    setApplicationsByIdFromFB,\r\n    addApplicationToState,\r\n    updateApplication,\r\n    deleteApplication,\r\n  } = useContext(applicationContext);\r\n\r\n  const {\r\n    setCitiesOptionFromFB,\r\n    setResultsOptionFromFB,\r\n    setSourcesOptionFromFB,\r\n  } = useContext(settingsContext);\r\n\r\n  useEffect(() => {\r\n    fetchApplicationsById(user).onSnapshot((doc) => {\r\n      setApplicationsByIdFromFB(doc.data());\r\n    });\r\n\r\n    fetchApplicationsAllIds(user).onSnapshot((doc) => {\r\n      if (!doc.data().companyList) {\r\n        return;\r\n      }\r\n      setApplicationAllIdsFromFB(doc.data().companyList);\r\n    });\r\n\r\n    getListOfCitiesFromFB(user).onSnapshot((response) => {\r\n      setCitiesOptionFromFB(response.data().listOfCitiesFromSelectorMenu);\r\n    });\r\n    getListOfResultsFromFB(user).onSnapshot((response) => {\r\n      setResultsOptionFromFB(response.data().listOfResultsFromSelectorMenu);\r\n    });\r\n    getListOfSourcesFromFB(user).onSnapshot((response) => {\r\n      setSourcesOptionFromFB(response.data().listOfSourcesFromSelectorMenu);\r\n    });\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    if (applicationsAllIds.length > 0) {\r\n      setApplicationsAllIdsToFB(user, applicationsAllIds);\r\n    }\r\n    if (applicationsById) {\r\n      setApplicationsByIdToFB(user, applicationsById);\r\n    }\r\n  }, [user, applicationsAllIds, applicationsById]);\r\n\r\n  const handleDeleteApplicationClick = (company) => {\r\n    deleteApplication(company);\r\n  };\r\n\r\n  const handleAddJobToListSubmit = (application) => {\r\n    addApplicationToState(application);\r\n    toggleShowJobsListTabClick();\r\n  };\r\n\r\n  const toggleShowJobAddTabClick = () => {\r\n    setShowAddNewJobTab(true);\r\n    setShowSettings(false);\r\n  };\r\n\r\n  const toggleShowJobsListTabClick = () => {\r\n    setShowAddNewJobTab(false);\r\n    setShowSettings(false);\r\n  };\r\n\r\n  const closeEditJobModal = () => {\r\n    setShowEditJobModal(false);\r\n    setCurrentlyUpdatedJob(null);\r\n  };\r\n\r\n  const handleOpenEditJobModalClick = (event, application) => {\r\n    event.preventDefault();\r\n    setCurrentlyUpdatedJob(application);\r\n    setShowEditJobModal(true);\r\n  };\r\n\r\n  const handleAddNewCommentToApplicationSubmit = (updatedJobCopy) => {\r\n    updateApplication(updatedJobCopy);\r\n  };\r\n\r\n  return (\r\n    <div className=\"main-container\">\r\n      <Nav\r\n        toggleShowJobAddTabClick={toggleShowJobAddTabClick}\r\n        toggleShowJobsListTabClick={toggleShowJobsListTabClick}\r\n        searchInputValue={searchInputValue}\r\n        setSearchInputValue={setSearchInputValue}\r\n        showSettings={showSettings}\r\n        setShowSettings={setShowSettings}\r\n        showAddNewJobTab={showAddNewJobTab}\r\n        showFrenchLanguage={showFrenchLanguage}\r\n      />\r\n      <div className=\"info-container\">\r\n        {showAddNewJobTab ? (\r\n          <AddNewJob\r\n            handleAddJobToListSubmit={handleAddJobToListSubmit}\r\n            applicationsAllIds={applicationsAllIds}\r\n            applicationsById={applicationsById}\r\n            handleOpenEditJobModalClick={handleOpenEditJobModalClick}\r\n          />\r\n        ) : (\r\n          <JobList\r\n            searchInputValue={searchInputValue}\r\n            handleDeleteApplicationClick={handleDeleteApplicationClick}\r\n            handleOpenEditJobModalClick={handleOpenEditJobModalClick}\r\n            showFrenchLanguage={showFrenchLanguage}\r\n          />\r\n        )}\r\n\r\n        {showEditJobModal && (\r\n          <EditItem // item\r\n            currentlyUpdatedJob={currentlyUpdatedJob}\r\n            closeEditJobModal={closeEditJobModal}\r\n            handleAddNewCommentToApplicationSubmit={\r\n              handleAddNewCommentToApplicationSubmit\r\n            }\r\n            showFrenchLanguage={showFrenchLanguage}\r\n          />\r\n        )}\r\n\r\n        {showSettings && <SettingsModal setShowSettings={setShowSettings} />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","const deleteSelectedJobInfoFromList = (fullJobsInfoList, company) => {\r\n  return Object.keys(fullJobsInfoList).reduce((obj, key) => {\r\n    if (key !== company) {\r\n      obj[key] = fullJobsInfoList[key];\r\n    }\r\n    return obj;\r\n  }, {});\r\n};\r\n\r\nexport default deleteSelectedJobInfoFromList;\r\n","import {\r\n  SET_APPLICATIONS_FROM_FB,\r\n  ADD_NEW_APPLICATION,\r\n  DELETE_APPLICATION,\r\n} from \"./applications-actions\";\r\nimport deleteSelectedJobInfoFromList from \"../../core/deleteSelectedJobInfoFromList\";\r\n\r\nexport const applicationsByIdReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case SET_APPLICATIONS_FROM_FB:\r\n      return action.payload;\r\n\r\n    case ADD_NEW_APPLICATION:\r\n      const applicationsByIdCopy = { ...state };\r\n      applicationsByIdCopy[action.payload.company] = action.payload;\r\n      return applicationsByIdCopy;\r\n\r\n    case DELETE_APPLICATION:\r\n      const applicationsByIdWithoutDeletedCompany = deleteSelectedJobInfoFromList(\r\n        state,\r\n        action.payload\r\n      );\r\n      return applicationsByIdWithoutDeletedCompany;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default applicationsByIdReducer;\r\n","export const SET_APPLICATIONS_FROM_FB = \"SET_APPLICATIONS_FROM_FB\";\r\nexport const ADD_NEW_APPLICATION = \"ADD_NEW_APPLICATION\";\r\nexport const DELETE_APPLICATION = \"DELETE_APPLICATION\";\r\n","import {\r\n  SET_APPLICATIONS_FROM_FB,\r\n  ADD_NEW_APPLICATION,\r\n  DELETE_APPLICATION,\r\n} from \"./applications-actions\";\r\n\r\nconst applicationsAllIdsReducer = (state, action) => {\r\n  let updatedState;\r\n  switch (action.type) {\r\n    case SET_APPLICATIONS_FROM_FB:\r\n      return action.payload;\r\n\r\n    case ADD_NEW_APPLICATION:\r\n      updatedState = [...state, action.payload.company];\r\n      return updatedState;\r\n\r\n    case DELETE_APPLICATION:\r\n      updatedState = state.filter(\r\n        (applicationId) => applicationId !== action.payload\r\n      );\r\n      return updatedState;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default applicationsAllIdsReducer;\r\n","import React, { useReducer } from \"react\";\r\nimport {\r\n  SET_APPLICATIONS_FROM_FB,\r\n  ADD_NEW_APPLICATION,\r\n  DELETE_APPLICATION,\r\n} from \"./applications-actions\";\r\nimport ApplicationContext from \"./application-context\";\r\nimport applicationsByIdReducer from \"./applicationsById-reducer\";\r\nimport applicationsAllIdsReducer from \"./applicationsAllId-reducer\";\r\n\r\nconst ApplicationsState = (props) => {\r\n  const initialApplicationsByIdState = null;\r\n  const initialApplicationsAllIdsState = [];\r\n\r\n  const [applicationsByIdState, dispatchApplicationsById] = useReducer(\r\n    applicationsByIdReducer,\r\n    initialApplicationsByIdState\r\n  );\r\n\r\n  const [applicationsAllIdsState, dispatchApplicationsAllIds] = useReducer(\r\n    applicationsAllIdsReducer,\r\n    initialApplicationsAllIdsState\r\n  );\r\n\r\n  const setApplicationAllIdsFromFB = (applicationsIds) => {\r\n    dispatchApplicationsAllIds({\r\n      type: SET_APPLICATIONS_FROM_FB,\r\n      payload: applicationsIds,\r\n    });\r\n  };\r\n\r\n  const setApplicationsByIdFromFB = (application) => {\r\n    dispatchApplicationsById({\r\n      type: SET_APPLICATIONS_FROM_FB,\r\n      payload: application,\r\n    });\r\n  };\r\n\r\n  const addApplicationToState = (application) => {\r\n    dispatchApplicationsAllIds({\r\n      type: ADD_NEW_APPLICATION,\r\n      payload: application,\r\n    });\r\n\r\n    dispatchApplicationsById({\r\n      type: ADD_NEW_APPLICATION,\r\n      payload: application,\r\n    });\r\n  };\r\n\r\n  const updateApplication = (updatedApplication) => {\r\n    dispatchApplicationsById({\r\n      type: ADD_NEW_APPLICATION,\r\n      payload: updatedApplication,\r\n    });\r\n  };\r\n\r\n  const deleteApplication = (application) => {\r\n    dispatchApplicationsById({\r\n      type: DELETE_APPLICATION,\r\n      payload: application,\r\n    });\r\n\r\n    dispatchApplicationsAllIds({\r\n      type: DELETE_APPLICATION,\r\n      payload: application,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ApplicationContext.Provider\r\n      value={{\r\n        applicationsAllIds: applicationsAllIdsState,\r\n        applicationsById: applicationsByIdState,\r\n        setApplicationsByIdFromFB,\r\n        setApplicationAllIdsFromFB,\r\n        addApplicationToState,\r\n        updateApplication,\r\n        deleteApplication,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </ApplicationContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ApplicationsState;\r\n","import {\r\n  ADD_OPTION_TO_LIST,\r\n  DELETE_OPTION_FROM_LIST,\r\n  SET_OPTION_FROM_FB,\r\n} from \"./settings-actions\";\r\n\r\nconst optionSettingsReducer = (state, action) => {\r\n  let updatedOptions;\r\n  switch (action.type) {\r\n    case SET_OPTION_FROM_FB:\r\n      return action.payload;\r\n\r\n    case ADD_OPTION_TO_LIST:\r\n      updatedOptions = [...state, action.payload];\r\n      return updatedOptions;\r\n\r\n    case DELETE_OPTION_FROM_LIST:\r\n      updatedOptions = state.filter((option) => option !== action.payload);\r\n      return updatedOptions;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default optionSettingsReducer;\r\n","export const ADD_OPTION_TO_LIST = \"ADD_OPTION_TO_LIST\";\r\nexport const DELETE_OPTION_FROM_LIST = \"DELETE_OPTION_FROM_LIST\";\r\nexport const SET_OPTION_FROM_FB = \"SET_OPTION_FROM_FB\";\r\n","import React, { useReducer } from \"react\";\r\nimport SettingsContext from \"./settings-context\";\r\nimport optionSettingsReducer from \"./settings-reducer\";\r\nimport {\r\n  ADD_OPTION_TO_LIST,\r\n  DELETE_OPTION_FROM_LIST,\r\n  SET_OPTION_FROM_FB,\r\n} from \"./settings-actions\";\r\n\r\nconst SettingsState = (props) => {\r\n  const initialCitiesState = [];\r\n  const initialResultssState = [];\r\n  const initialSourcesState = [];\r\n\r\n  const [listOfCities, dispatchListOfCities] = useReducer(\r\n    optionSettingsReducer,\r\n    initialCitiesState\r\n  );\r\n  const [listOfResults, dispatchListOfResults] = useReducer(\r\n    optionSettingsReducer,\r\n    initialResultssState\r\n  );\r\n  const [listOfSources, dispatchListOfSources] = useReducer(\r\n    optionSettingsReducer,\r\n    initialSourcesState\r\n  );\r\n\r\n  const setCitiesOptionFromFB = (cities) => {\r\n    dispatchListOfCities({\r\n      type: SET_OPTION_FROM_FB,\r\n      payload: cities,\r\n    });\r\n  };\r\n  const setResultsOptionFromFB = (results) => {\r\n    dispatchListOfResults({\r\n      type: SET_OPTION_FROM_FB,\r\n      payload: results,\r\n    });\r\n  };\r\n  const setSourcesOptionFromFB = (sources) => {\r\n    dispatchListOfSources({\r\n      type: SET_OPTION_FROM_FB,\r\n      payload: sources,\r\n    });\r\n  };\r\n\r\n  const addCityToList = (city) => {\r\n    dispatchListOfCities({\r\n      type: ADD_OPTION_TO_LIST,\r\n      payload: city,\r\n    });\r\n  };\r\n  const addResultToList = (result) => {\r\n    dispatchListOfResults({\r\n      type: ADD_OPTION_TO_LIST,\r\n      payload: result,\r\n    });\r\n  };\r\n  const addSourceToList = (source) => {\r\n    dispatchListOfSources({\r\n      type: ADD_OPTION_TO_LIST,\r\n      payload: source,\r\n    });\r\n  };\r\n\r\n  const deleteCity = (city) => {\r\n    dispatchListOfCities({\r\n      type: DELETE_OPTION_FROM_LIST,\r\n      payload: city,\r\n    });\r\n  };\r\n  const deleteResult = (result) => {\r\n    dispatchListOfResults({\r\n      type: DELETE_OPTION_FROM_LIST,\r\n      payload: result,\r\n    });\r\n  };\r\n  const deleteSource = (source) => {\r\n    dispatchListOfSources({\r\n      type: DELETE_OPTION_FROM_LIST,\r\n      payload: source,\r\n    });\r\n  };\r\n  return (\r\n    <SettingsContext.Provider\r\n      value={{\r\n        listOfCities,\r\n        listOfResults,\r\n        listOfSources,\r\n        setCitiesOptionFromFB,\r\n        setResultsOptionFromFB,\r\n        setSourcesOptionFromFB,\r\n        addCityToList,\r\n        addResultToList,\r\n        addSourceToList,\r\n        deleteCity,\r\n        deleteResult,\r\n        deleteSource,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </SettingsContext.Provider>\r\n  );\r\n};\r\n\r\nexport default SettingsState;\r\n","import React, { useContext } from \"react\";\r\nimport \"./App.css\";\r\nimport Auth from \"./components/Auth/Auth\";\r\nimport Main from \"./components/Database/Main\";\r\nimport AuthContext from \"./context/auth-context/auth-context\";\r\nimport ApplicationsState from \"./context/applications-context/ApplicationsState\";\r\nimport SettingsState from \"./context/settings-context/SettingsState\";\r\n\r\nconst App = () => {\r\n  const { user, showFrenchLanguage } = useContext(AuthContext);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {!user ? (\r\n        <Auth />\r\n      ) : (\r\n        <ApplicationsState>\r\n          <SettingsState>\r\n            <Main user={user} showFrenchLanguage={showFrenchLanguage} />\r\n          </SettingsState>\r\n        </ApplicationsState>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import {\r\n  SET_LOGGEDIN_USER,\r\n  LOGOUT_USER,\r\n  CHANGE_LANGUAGE,\r\n} from \"./auth-actions\";\r\n\r\nconst authReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case SET_LOGGEDIN_USER:\r\n      return { ...state, user: action.payload };\r\n    case LOGOUT_USER:\r\n      return { ...state, user: \"\" };\r\n    case CHANGE_LANGUAGE:\r\n      return { ...state, showFrenchLanguage: !state.showFrenchLanguage };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default authReducer;\r\n","export const SET_LOGGEDIN_USER = \"SET_LOGGEDIN_USER\";\r\nexport const LOGOUT_USER = \"LOGOUT_USER\";\r\nexport const CHANGE_LANGUAGE = \"CHANGE_LANGUAGE\";\r\n","import React, { useReducer } from \"react\";\r\nimport AuthContext from \"./auth-context\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport {\r\n  SET_LOGGEDIN_USER,\r\n  LOGOUT_USER,\r\n  CHANGE_LANGUAGE,\r\n} from \"./auth-actions\";\r\n\r\nconst AuthState = (props) => {\r\n  const initialState = {\r\n    user: \"\",\r\n    showFrenchLanguage: false,\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  const setLoggedInUser = (user) => {\r\n    dispatch({\r\n      type: SET_LOGGEDIN_USER,\r\n      payload: user,\r\n    });\r\n  };\r\n\r\n  const logoutUser = () => {\r\n    dispatch({\r\n      type: LOGOUT_USER,\r\n      payload: \"\",\r\n    });\r\n  };\r\n\r\n  const changeLanguage = () => {\r\n    dispatch({\r\n      type: CHANGE_LANGUAGE,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user: state.user,\r\n        showFrenchLanguage: state.showFrenchLanguage,\r\n        setLoggedInUser,\r\n        logoutUser,\r\n        changeLanguage,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthState;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport AuthState from \"./context/auth-context/AuthState\";\r\n\r\nReactDOM.render(\r\n  <AuthState>\r\n    <App />\r\n  </AuthState>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}